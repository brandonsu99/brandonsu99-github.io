{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/node.jsx","PathfindingVisualizer/algorithms/dijkstra.js","PathfindingVisualizer/algorithms/astar.js","PathfindingVisualizer/algorithms/bfs.js","PathfindingVisualizer/algorithms/dfs.js","PathfindingVisualizer/algorithms/greedy.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","this","props","col","isFinish","isStart","isWall","row","onMouseDown","distance","previousNode","isVisted","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","sort","nodeA","nodeB","astar","manhattanDistance","nodeOne","nodeTwo","Math","abs","greedy","PathfindingVisualizer","styles","fontWeight","fontSize","state","getInitialGrid","mouseIsPressed","allowClear","setState","newGrid","getNewGridWithWallToggled","class","style","color","href","onClick","handleClear","clearPath","visualizeDijkstra","visualizeAstar","visualizeGreedy","visualizeBFS","visualizeDFS","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","clearWall","document","getElementById","getNewGridWithPathToggled","temp","bfs","nodesInShortestPathOrder","getNodesInShortestPathOrder","animateDijkstra","unshift","dfs","i","setTimeout","animateShortestPath","currentRow","createNode","slice","newNode","currentNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae9d7a1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\n\nimport './node.css';\n\n\nexport default class Node extends Component {\n\trender()\n\t{\n\t\tconst {\n\t\t\tcol,\n\t\t\tisFinish,\n\t\t\tisStart,\n\t\t\tisWall,\n\t\t\trow,\n\t\t\tdistance,\n\t\t\tpreviousNode,\n\t\t\tisVisted,\n\t\t\tonMouseDown,\n      \t\tonMouseEnter,\n      \t\tonMouseUp,\n\t\t  } = this.props;\n\t\tconst extraClassName = isFinish\n\t\t\t? 'node-finish'\n\t\t\t:  isStart\n\t\t\t? 'node-start'\n\t\t\t: isWall\n\t\t\t? 'node-wall'\n\t\t\t: '';\n\t\treturn <div id= {1} \n\t\tclassName = {`node ${extraClassName}`}\n\t\tid={`node-${row}-${col}`}\n\t\tonMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}>\n\t\t\n\t\t</div>;\n\n\t};\n\n}","export function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n\n\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n        \n\n\n    }\n\n\n\n}\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n    \n\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n  \nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n  \n\n","export function astar(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        \n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        //console.log(closestNode.row + \"  \" + closestNode.col+\"\\n\");\n\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid, finishNode);\n\n\n    }\n\n\n\n}\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction manhattanDistance(nodeOne, nodeTwo) {\n    \n  \n    let xChange = Math.abs(nodeOne.row - nodeTwo.row);\n    let yChange = Math.abs(nodeOne.col - nodeTwo.col);\n  \n    return (xChange + yChange);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + manhattanDistance(neighbor, finishNode)- manhattanDistance(node, finishNode)+1;\n      neighbor.previousNode = node;\n    }\n}\n  ","export function bfs(grid, startNode, finishNode) {\n    startNode.distance = 0;\n    const visitedNodesInOrder = [];\n    const unvisitedNodes = [];\n    unvisitedNodes.push(startNode);\n    while (!!unvisitedNodes.length) {\n        \n        if (unvisitedNodes.length >2000) return visitedNodesInOrder;\n        const closestNode = unvisitedNodes.shift();\n        //console.log(closestNode.row +\" \" + closestNode.col + \"\\n\");\n        if (closestNode.isWall || closestNode.isVisited ) continue;\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        //if (closestNode.row == finishNode.row && closestNode.col == finishNode.col) console.log(\"BREAKKKK NOWWWWWW\\n\");\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        const temp = updateUnvisitedNeighbors(closestNode, grid);\n        \n        for (const neighbor of temp)\n        {\n            unvisitedNodes.push(neighbor);\n            //console.log(neighbor.row + \",\" + neighbor.col + \" \");\n\n\n        }\n        //console.log(\"\\n\\n\");\n       //console.log(unvisitedNodes.length+\" \" +visitedNodesInOrder.length+\"\\n\");\n    }\n\n    return visitedNodesInOrder;\n\n\n\n}\n\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n    return unvisitedNeighbors;\n    \n\n}\n\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n  ","export function dfs(grid, startNode, finishNode) {\n\n    startNode.distance = 0;\n    const visitedNodesInOrder = [];\n    const unvisitedNodes = [];\n    unvisitedNodes.push(startNode);\n    while (!!unvisitedNodes.length) {\n        \n        if (unvisitedNodes.length >2000) return visitedNodesInOrder;\n        const closestNode = unvisitedNodes.shift();\n        //console.log(closestNode.row +\" \" + closestNode.col + \"\\n\");\n        if (closestNode.isWall || closestNode.isVisited ) continue;\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        //if (closestNode.row == finishNode.row && closestNode.col == finishNode.col) console.log(\"BREAKKKK NOWWWWWW\\n\");\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        const temp = updateUnvisitedNeighbors(closestNode, grid);\n        \n        for (const neighbor of temp)\n        {\n            unvisitedNodes.unshift(neighbor);\n            //console.log(neighbor.row + \",\" + neighbor.col + \" \");\n\n\n        }\n        //console.log(\"\\n\\n\");\n       //console.log(unvisitedNodes.length+\" \" +visitedNodesInOrder.length+\"\\n\");\n    }\n\n    return visitedNodesInOrder;\n}\n\n\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n    return unvisitedNeighbors;\n    \n\n}\n\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    \n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n  ","export function greedy(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        if (closestNode.isWall) continue;\n\n        \n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        //console.log(closestNode.row + \"  \" + closestNode.col+\"\\n\");\n\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid, finishNode);\n\n\n    }\n\n\n\n}\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n}\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction manhattanDistance(nodeOne, nodeTwo) {\n    \n  \n    let xChange = Math.abs(nodeOne.row - nodeTwo.row);\n    let yChange = Math.abs(nodeOne.col - nodeTwo.col);\n  \n    return (xChange + yChange);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = manhattanDistance(neighbor, finishNode);\n      neighbor.previousNode = node;\n    }\n}\n  ","import React, {Component} from 'react';\nimport Node from './Node/node';\nimport {dijkstra} from './algorithms/dijkstra';\nimport {astar} from './algorithms/astar';\nimport {bfs} from './algorithms/bfs';\nimport {dfs} from './algorithms/dfs';\nimport {greedy} from './algorithms/greedy';\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 12;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 38;\n\n \n\nclass PathfindingVisualizer extends Component {\n\t\n\t\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t  grid: getInitialGrid(),\n\t\t  mouseIsPressed: false,\n\t\t  allowClear : true,\n\t\t  \n\t\t};\n\t  }\n\t\n\t  componentDidMount() {\n\t\tconst grid = getInitialGrid();\n\t\tthis.setState({grid});\n\t  }\n\t\n\t  handleMouseDown(row, col) {\n\t\t\n\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t\tthis.setState({grid: newGrid, mouseIsPressed: true});\n\t  }\n\t\n\t  handleMouseEnter(row, col) {\n\t\tif (!this.state.mouseIsPressed) return;\n\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t\tthis.setState({grid: newGrid});\n\t  }\n\t\n\t  handleMouseUp() {\n\t\tthis.setState({mouseIsPressed: false});\n\t  }\n\t\n\n\tstyles={\n\t\tfontWeight : \"bold\", \n\t\tfontSize : 50\n\n\t};\n\n\t\n\n\trender()\n\t{\tconst {grid} = this.state;\n\n\t\treturn \t(\n\t\t\t<>\n\t\t\t\t<div>\n     \t\t\t<nav class=\"navbar navbar bg-dark\">\n       \t\t\t\t<div class=\"container-fluid\">\n        \t\t \t\t<div class=\"navbar-header\">\n           \t\t\t\t\t<a style = {{color:'white', fontWeight:'bold', fontSize : 20}} id=\"refreshButton\" class=\"navbar-brand\" href=\"#\">Pathfinding Visualizer</a>\n        \t\t \t\t</div> \n         \t\t\t\t\n\t\t\t\t\t\t<button onClick={() => this.handleClear()} className=\"btn-danger btn-secondary btn-sm \"> Clear Everything!</button>\n\t\t\t\t\t\t<button onClick={() => this.clearPath()} className=\"btn-warning btn-secondary btn-sm \"> Clear Path!</button>\n\n\t\t\t\t\t\t<button onClick={() => this.visualizeDijkstra()} className=\"btn-success btn-secondary btn-sm\"> Visualize Dijkstra's!</button>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<button onClick={() => this.visualizeAstar()} className=\"btn-success btn-secondary btn-sm \"> Visualize A*!</button>\n\t\t\t\t\t\t<button onClick={() => this.visualizeGreedy()} className=\"btn-success btn-secondary btn-sm\"> Visualize Greedy Best First Search!</button>\n\t\t\t\t\t\t<button onClick={() => this.visualizeBFS()} className=\"btn-success btn-secondary btn-sm\"> Visualize Breadth First Search!</button>\n\t\t\t\t\t\t<button onClick={() => this.visualizeDFS()} className=\"btn-success btn-secondary btn-sm\"> Visualize Depth First Search!</button>\n\t\t\t\t\t\t<a style = {{color:'white'}} id=\"refreshButton\" class=\"navbar-brand\" href=\"#\">By Brandon Su</a>\n\t\t\t\t\t\t<a id=\"refreshButton\" class=\"navbar-brand\" href=\"#\">Left click and hold to make walls!</a>\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\t\t\t\t\n\n\t\t\t\t\n\n\n\t\t\t\t<div className=\"grid\">\n          \t\t\t{grid.map((row, rowIdx) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={rowIdx}>\n\t\t\t\t\t\t\t{row.map((node, nodeIdx) => {\n\t\t\t\t\t\t\tconst {row, col, isFinish, isStart, isWall, mouseIsPressed} = node;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\tkey={nodeIdx}\n\t\t\t\t\t\t\t\tcol={col}\n\t\t\t\t\t\t\t\tisFinish={isFinish}\n\t\t\t\t\t\t\t\tisStart={isStart}\n\t\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\n\t\t\t\t\t\t\t\tonMouseDown={(row, col) => this.handleMouseDown(row, col)}\n\t\t\t\t\t\t\t\tonMouseEnter={(row, col) =>\n\t\t\t\t\t\t\t\t  this.handleMouseEnter(row, col)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\trow={row}></Node>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\n\n\t\t\t</>\n\n\t\t);\n\n\t}\n\thandleClear()\n\t{\n\t\tif (!this.allowClear)\n\t\treturn;\n\t\tthis.clearPath();\n\t\tthis.clearWall();\n\t\tdocument.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = 'node node-start';\n\t\tdocument.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = 'node node-finish';\n\t}\n\tclearWall()\n\t{\n\t\tif (!this.allowClear)\n\t\treturn;\n\t\tconst {grid} = this.state;\n\t\tfor (let row = 0; row < 20; row++) {\n\t\t\t\n\t\t\tfor (let col = 0; col < 50; col++) {\n\t\t\t\t\n\t\t\t\tif (grid[row][col].isWall)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n\t\t\t\t\tthis.setState({grid: newGrid});\n\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ='node';\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\tclearPath()\n\t{\n\t\tif (!this.allowClear)\n\t\treturn;\n\t\tconst {grid} = this.state;\n\t\tgrid[START_NODE_ROW][START_NODE_COL].isVisited = false;\n\t\tgrid[START_NODE_ROW][START_NODE_COL].previousNode = null;\n\t\tgrid[FINISH_NODE_ROW][FINISH_NODE_COL].isVisited = false;\n\t\tgrid[FINISH_NODE_ROW][FINISH_NODE_COL].previousNode = null;\n\t\t\n\t\tfor (let row = 0; row < 20; row++) {\n\t\t\t\n\t\t\tfor (let col = 0; col < 50; col++) {\n\t\t\t\tgrid[row][col].distance = Infinity;\n\t\t\t\tif (grid[row][col].isVisited)\n\t\t\t\t{\n\t\t\t\t\tif (row != START_NODE_ROW || col!= START_NODE_COL)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(row!= FINISH_NODE_ROW || col != FINISH_NODE_COL)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst newGrid = getNewGridWithPathToggled(this.state.grid, row, col);\n\t\t\t\t\t\t\tthis.setState({grid: newGrid});\n\t\t\t\t\t\t\t//console.log(grid[row][col].isVisited);\n\t\t\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ='node';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\n\t}\n\n\tvisualizeBFS()\n\t{\n\t\t\n\t\tconst {grid} = this.state;\n\t\tthis.clearPath();\n\t\tthis.allowClear = false;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n    \tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\t\n\t\tconst visitedNodesInOrder = bfs(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t}\n\n\n\tvisualizeDFS()\n\t{\n\t\tconst {grid} = this.state;\n\t\tthis.clearPath();\n\t\tthis.allowClear = false;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n    \tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\t\n\t\tconst visitedNodesInOrder = dfs(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\n\t}\n\n\n\t\n\tvisualizeAstar()\n\t{\n\t\tconst {grid} = this.state;\n\t\tthis.clearPath();\n\t\tthis.allowClear = false;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n    \tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\t\n\t\tconst visitedNodesInOrder = astar(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\n\t}\n\tvisualizeGreedy()\n\t{\n\t\tconst {grid} = this.state;\n\t\tthis.clearPath();\n\t\tthis.allowClear = false;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n    \tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\t\n\t\tconst visitedNodesInOrder = greedy(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\n\t}\n\tvisualizeDijkstra()\n\t{\n\t\tconst {grid} = this.state;\n\t\tthis.clearPath();\n\t\tthis.allowClear = false;\n\t\tconst startNode = grid[START_NODE_ROW][START_NODE_COL];\n    \tconst finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\t\t\n\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n\t\tthis.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n\t} \n\n\n\tanimateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n\t\t\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\n\t\t  if (i === visitedNodesInOrder.length) {\n\t\t\tsetTimeout(() => {\n\t\t\t  this.animateShortestPath(nodesInShortestPathOrder);\n\t\t\t}, 10 * i);\n\t\t\t\n\t\t\treturn;\n\t\t  }\n\t\t  setTimeout(() => {\n\t\t\tconst node = visitedNodesInOrder[i];\n\n\n\t\t\tif (node.row == START_NODE_ROW && node.col == START_NODE_COL)\n\t\t\t{\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-start';\n\n\t\t\t}\n\t\t\telse if (node.row==FINISH_NODE_ROW && node.col ==FINISH_NODE_COL){\n\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-finish';\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-visited';\n\t\t\t}\n\t\t  }, 10 * i);\n\t\t}\n\t\t\n\t  }\n\n\n\t  \n\t\n\t  animateShortestPath(nodesInShortestPathOrder) {\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n\t\t  setTimeout(() => {\n\t\t\tconst node = nodesInShortestPathOrder[i];\n\t\t\tif (node.row == START_NODE_ROW && node.col == START_NODE_COL)\n\t\t\t{\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-start';\n\n\t\t\t}\n\t\t\telse if (node.row==FINISH_NODE_ROW && node.col ==FINISH_NODE_COL){\n\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-finish';\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\n\t\t\t'node node-shortest-path';\n\t\t\t}\n\t\t\t\n\t\t  }, 50 * i);\n\t\t}\n\t\tthis.allowClear = true;\n\t  }\n}\n\n\n\n\nexport default PathfindingVisualizer;\n\nconst getInitialGrid = () => {\n\tconst grid = [];\n\tfor (let row = 0; row < 20; row++) {\n\t  const currentRow = [];\n\t  for (let col = 0; col < 50; col++) {\n\t\tcurrentRow.push(createNode(col, row));\n\t  }\n\t  grid.push(currentRow);\n\t}\n\treturn grid;\n  };\n\n\n\n\nconst createNode = (col, row) => {\n\treturn {\n\t  col,\n\t  row,\n\t  isStart: row === START_NODE_ROW && col === START_NODE_COL,\n\t  isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n\t  isWall: false,\n\t  distance: Infinity,\n\t  previousNode: null,\n\t  isVisited: false,\n\t};\n  };\n  \nconst getNewGridWithWallToggled = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t  ...node,\n\t  distance: Infinity,\n\t  previousNode: null,\n\t  isVisited: false,\n\t  isWall: !node.isWall,\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n\n\nconst getNewGridWithPathToggled = (grid, row, col) => {\n\tconst newGrid = grid.slice();\n\tconst node = newGrid[row][col];\n\tconst newNode = {\n\t  ...node,\n\t  distance: Infinity,\n\t  previousNode: null,\n\t  isVisited: false,\n\n\t};\n\tnewGrid[row][col] = newNode;\n\treturn newGrid;\n};\n\n\n\n\nconst getNodesInShortestPathOrder =(finishNode) =>{\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}